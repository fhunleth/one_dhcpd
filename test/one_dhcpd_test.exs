# SPDX-FileCopyrightText: 2018 Frank Hunleth
#
# SPDX-License-Identifier: Apache-2.0
#
defmodule OneDHCPDTest do
  use ExUnit.Case

  test "decodes a DHCP request" do
    packet =
      <<0x01, 0x01, 0x06, 0x00, 0x39, 0x93, 0xF5, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xDB,
        0x55, 0xE7, 0x8B, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x82, 0x53, 0x63,
        0x35, 0x01, 0x03, 0x32, 0x04, 0xC0, 0xA8, 0x01, 0x52, 0x0C, 0x0C, 0x68, 0x61, 0x6C, 0x66,
        0x6D, 0x61, 0x72, 0x61, 0x74, 0x68, 0x6F, 0x6E, 0x37, 0x12, 0x01, 0x1C, 0x02, 0x03, 0x0F,
        0x06, 0x77, 0x0C, 0x2C, 0x2F, 0x1A, 0x79, 0x2A, 0x79, 0xF9, 0x21, 0xFC, 0x2A, 0xFF>>

    dhcp = OneDHCPD.Message.decode(packet)
    assert dhcp.chaddr == [224, 219, 85, 231, 139, 93]
    assert dhcp.ciaddr == {0, 0, 0, 0}
    assert dhcp.hops == 0
    assert dhcp.htype == 1
    assert dhcp.op == 1
    assert dhcp.secs == 0
    assert dhcp.siaddr == {0, 0, 0, 0}
    assert dhcp.yiaddr == {0, 0, 0, 0}
    assert dhcp.xid == 965_997_949
    assert Keyword.get(dhcp.options, :host_name) == "halfmarathon"
    assert Keyword.get(dhcp.options, :dhcp_requested_address) == {192, 168, 1, 82}
    assert Keyword.get(dhcp.options, :dhcp_message_type) == :request

    # Test re-encoding
    encoded = OneDHCPD.Message.encode(dhcp)
    assert encoded == packet
  end

  test "decodes a DHCP ack" do
    packet =
      <<0x02, 0x01, 0x06, 0x00, 0x39, 0x93, 0xF5, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xC0, 0xA8, 0x01, 0x52, 0xC0, 0xA8, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xDB,
        0x55, 0xE7, 0x8B, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x82, 0x53, 0x63,
        0x35, 0x01, 0x05, 0x36, 0x04, 0xC0, 0xA8, 0x01, 0x01, 0x33, 0x04, 0x00, 0x01, 0x51, 0x80,
        0x3A, 0x04, 0x00, 0x00, 0xA8, 0xC0, 0x3B, 0x04, 0x00, 0x01, 0x27, 0x50, 0x01, 0x04, 0xFF,
        0xFF, 0xFF, 0x00, 0x1C, 0x04, 0xC0, 0xA8, 0x01, 0xFF, 0x0C, 0x0C, 0x68, 0x61, 0x6C, 0x66,
        0x6D, 0x61, 0x72, 0x61, 0x74, 0x68, 0x6F, 0x6E, 0x06, 0x04, 0xC0, 0xA8, 0x01, 0x01, 0x03,
        0x04, 0xC0, 0xA8, 0x01, 0x01, 0xFF>>

    dhcp = OneDHCPD.Message.decode(packet)
    assert dhcp.chaddr == [224, 219, 85, 231, 139, 93]
    assert dhcp.ciaddr == {0, 0, 0, 0}
    assert dhcp.hops == 0
    assert dhcp.htype == 1
    assert dhcp.op == 2
    assert dhcp.secs == 0
    assert dhcp.siaddr == {192, 168, 1, 1}
    assert dhcp.yiaddr == {192, 168, 1, 82}
    assert dhcp.xid == 965_997_949

    assert Keyword.get(dhcp.options, :dhcp_message_type) == :ack
    assert Keyword.get(dhcp.options, :routers) == [{192, 168, 1, 1}]
    assert Keyword.get(dhcp.options, :host_name) == "halfmarathon"
    assert Keyword.get(dhcp.options, :broadcast_address) == {192, 168, 1, 255}
    assert Keyword.get(dhcp.options, :subnet_mask) == {255, 255, 255, 0}
    assert Keyword.get(dhcp.options, :dhcp_rebinding_time) == 75600
    assert Keyword.get(dhcp.options, :dhcp_renewal_time) == 43200
    assert Keyword.get(dhcp.options, :dhcp_lease_time) == 86400
    assert Keyword.get(dhcp.options, :dhcp_server_identifier) == {192, 168, 1, 1}

    # Test re-encoding
    encoded = OneDHCPD.Message.encode(dhcp)
    assert encoded == packet
  end
end
